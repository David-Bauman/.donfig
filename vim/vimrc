if &compatible
  set nocompatible " has side effects so only set if compatible has been set
endif

set visualbell " visual flash instead of annoying chime noise
set backspace=indent,eol,start " backspace can delete auto-indents, newline chars, and stuff not typed this session
set number relativenumber " Line numbers on the side
set nowrap " Don't wrap long lines
set splitbelow " :vsplit new pane opens below
set splitright " :split new pane opens right 
set t_Co=256 " proper colors
set ignorecase " make searches case-insensitive...
set smartcase " ...unless they contain upper-case letters
set tabstop=2 expandtab shiftwidth=2 autoindent " indentation
set hlsearch " search highlighting
set incsearch " incremental search highlighting
set scrolloff=7 " keep at least 7 lines above and below cursor when scrolling
set nobackup nowritebackup noswapfile " do not keep annoying swap/back files
if v:version >= 730
  set undofile " keep a persistent backup file
  set undodir=~/.vim/.undo,~/tmp,/tmp
endif
syntax on " syntax highlighting

" mapleader=<leader> in map commands, maplocalleader=<localleader>
let mapleader = ","
let maplocalleader = "\\"

" Change escape to jk 
inoremap jk <esc>

" Never use ; anyway so don't have to hit shift anymore
nnoremap ; :

" Disable arrow keys and escape
noremap <Up> <nop>
noremap <Down> <nop>
noremap <Left> <nop>
noremap <Right> <nop>
inoremap <esc> <nop>

" delete line
inoremap <leader><c-d> <esc>ddi

" uppercase current word
inoremap <leader><c-u> <esc>viwUi
nnoremap <leader><c-u> viwU

" lowercase current word
inoremap <leader><c-l> <esc>viwui
nnoremap <leader><c-l> viwu

" open vimrc
nnoremap <leader>ev :vsplit $MYVIMRC<cr>
" source vimrc
nnoremap <leader>sv :source $MYVIMRC<cr>

" enclose current word in quotes (double or single)
nnoremap <leader>" viw<esc>a"<esc>bi"<esc>lel
nnoremap <leader>' viw<esc>a'<esc>bi'<esc>lel
inoremap <leader>" <esc>viw<esc>a"<esc>bi"<esc>lel<Right>i
inoremap <leader>' <esc>viw<esc>a'<esc>bi'<esc>lel<Right>i
vnoremap <leader>" <esc>v`<<esc>i"<esc>v`><esc>a"<esc>
vnoremap <leader>' <esc>v`<<esc>i'<esc>v`><esc>a'<esc>

" write, quit file
noremap <leader>w <esc>:w<CR>
noremap <leader>q <esc>:q<CR>
noremap <leader>x <esc>:x<CR>

" Split navigation
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>

" Turn off search highlights
nnoremap <leader><space> :nohlsearch<CR>

" Bash controls for lines
noremap <C-A> <Home>
noremap <C-E> <End>

" open/close tabs w/ normal syntax
noremap <leader><C-T> <esc>:tabnew<CR>
noremap <leader><C-W> <esc>:tabclose<CR>

" Switch CWD to the directory of the open buffer
noremap <leader>cd :cd %:p:h<cr>:pwd<cr>

augroup iff_abbrevs
  autocmd!
  autocmd Filetype python :iabbrev <buffer> iff if :<Left>
  autocmd Filetype javascript,c,cpp,java :iabbrev <buffer> iff if ()<Left>
augroup END

augroup tabsvspaces
  autocmd!
  autocmd FileType make setlocal ts=8 sts=8 sw=8 noexpandtab
augroup END

""" NerdTree
augroup nerdtree
  autocmd!
  autocmd StdinReadPre * let s:std_in=1
  " open NerdTree if vim opened without a file specified
  autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif
  " open NerdTree if vim opened w/ directory
  autocmd VimEnter * if argc() == 1 && isdirectory(argv()[0]) && !exists("s:std_in") | exe 'NERDTree' argv()[0] | wincmd p | ene | exe 'cd '.argv()[0] | endif
augroup END
noremap <leader>nt <esc>:NERDTreeToggle<CR>
let NERDTreeShowHidden=1

""" vim-airline
let g:airline_theme='distinguished'
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#formatter = 'unique_tail_improved'
let g:airline_powerline_fonts = 1

""" vim-colorscheme
set background=dark
colorscheme gruvbox 

""" vim-fzf
noremap <leader>f <esc>:Files<cr>

""" vim-commentary
augroup commentary
  autocmd!
  autocmd FileType sh,tmux setlocal commentstring=#\ %s
  autocmd FileType vim setlocal commentstring=\"\ %s
augroup END

""" vim-rainbow
let g:rainbow_active = 1
